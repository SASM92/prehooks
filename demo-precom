#!/usr/bin/env bash
# Reasoning behind strict bashing http://redsymbol.net/articles/unofficial-bash-strict-mode/


# Start script timer
start=$(date +%s)

set -euo pipefail
readonly IFS=$'\n\t'

# MYCONST="Blah"

# Link to confluence page
readonly CONF_PAGE="https://confluence.devops.jlr-apps.com/display/MAD/Pre-Commit+Hook"

# Colours
readonly RED='\033[0;31m'
readonly ORANGE='\033[0;33m'
readonly GREEN='\033[0;32m'
readonly CYAN='\033[0;36m'
readonly NC='\033[0m' # No-colour

# File size limits
readonly MAXSIZE=2000000 # 2mb
readonly MAXSIZE_mb=$((MAXSIZE / 1000000))

# Test directory
readonly TEST_DIR=$PWD/acceptance

# Testing tools
readonly PYTHON_LINT="flake8"
readonly SHELL_LINT="shellcheck"

function print_error(){
    echo -e "[ ${RED}FAIL${NC} ] $1" && exit 1
}

function print_warning(){
    echo -e "[ ${ORANGE}WARN${NC} ] $1"
}

function print_pass(){
    echo -e "[ ${GREEN}PASS${NC} ] $1"
}

function print_info(){
    echo -e "[ ${CYAN}INFO${NC} ] $1"
}

print_info "For more information please refer to ${CONF_PAGE}"

if [ "$(command -v python)" ]
then
    print_pass "Python detected, now checking version..."
    version=$(python --version 2>&1 | cut -d " " -f 2 | cut -d "." -f 1)
    if [ "$version" -gt "2" ]
    then
        print_pass "Python 3 installed"
        if [ "$(command -v robot)" ]
        then
            print_pass "Robot framework installed"
        else
            print_warning "Robot framework not installed, please install"
        fi
    else
        print_warning "Old version of Python installed, upgrade to Python 3."
    fi
else
	print_warning "Python not installed, please install Python"
fi

# Check for tests directory
if [ -d "$TEST_DIR" ] 
then
	print_pass "Test directory located" 
else
    print_error "Test directory cannot be located, commit rejected."
fi

# Check for gitlab-ci.yml file
if [ -f "$PWD/gitlab-ci.yml" ]
then
	print_pass "gitlab-ci.yml file found"
else
    print_error "gitlab-ci.yml file not found"
fi

# Check file sizes and unstage any files too big
print_info "Maxiumum file size is ${MAXSIZE_mb}mb"
for file in $(git diff --cached --name-only --diff-filter=AM); do
	# Check file size
	size_bytes=$(wc -c <"$file")
	size_mb=$((size_bytes / 1000000))
	print_info "${file}: file size is ${size_mb}mb"
	if [ "$size_bytes" -gt "$MAXSIZE" ]
	then 
		print_warning "${file}: File size is too big, unstaging file"
		git reset HEAD "$file"
		print_info "Track this file with LFS"
		print_info "https://www.atlassian.com/git/tutorials/git-lfs"
		continue 
	fi
done

# Check testing tools are installed
print_info "Checking testing tools are installed"
if [ "$(command -v ${PYTHON_LINT})" ]
then 
	print_pass "${PYTHON_LINT} installed"
else
	print_error "${PYTHON_LINT} not installed"
fi

if [ "$(command -v ${SHELL_LINT})" ]
then 
	print_pass "${SHELL_LINT} installed"
else
	print_error "${SHELL_LINT} not installed"
fi
# Check whether project is a java project

if [ -d "$PWD/src" ]
then
	print_info "This is a java project"
	print_info "Checking for jlr checkstyle file"
	if [ -f "$PWD/jlr-checkstyle.xml" ]
	then
		print_pass "JLR Checkstyle file found"
	else
		print_error "JLR Checkstyle file not found"
	fi
fi

java_lint=0

for file in $(git diff --cached --name-only --diff-filter=AM); do
	if [[ $file =~ \.py$ ]]
    then 
		print_pass "${file}: Python file detected, running ${PYTHON_LINT}..."
        print_info "If any tests fail the commit will be rejected"
        "${PYTHON_LINT}" "$file"
        print_pass "${file}: Passed ${PYTHON_LINT}"
    elif [[ $file =~ \.java$ ]]
    then 
		if [ $java_lint == 0 ]
		then
			print_pass "${file}: Java file detected, running checkstyle linting tests..."
			print_info "If any tests fail the commit will be rejected"
			mvn validate
			print_pass "All java files passed linting"
			java_lint+=1
		else
			continue
		fi
    elif [[ $file =~ \.js$ ]]
    then 
		print_pass "${file}: Javascript detected, running javascript test suite..."
    elif [[ $file =~ \.sh$ ]]
    then 
		print_pass "${file}: Shellscript detected, running ${SHELL_LINT}..."
        print_info "If any tests fail the commit will be rejected"
        "${SHELL_LINT}" "$file"
        print_pass "${file}: Passed ${SHELL_LINT}"
    else
        print_warning "${file}: Unknown file extension"
    fi
done

# End script timer
end=$(date +%s)
runtime=$((end-start))
print_info "Tests took ${runtime} seconds to run"
sleep 4
